const axios = require("axios");
const usersData = require("./usersData.js");

async function getBaseApi() {
  try {
    const res = await axios.get("https://raw.githubusercontent.com/mahmudx7/exe/main/baseApiUrl.json");
    return res.data.mahmud;
  } catch (e) {
    console.error("Base API рж▓рзЛржб ржХрж░рждрзЗ рж╕ржорж╕рзНржпрж╛:", e);
    return null;
  }
}

// ржХрзБржЗржЬ рж╕рзЗрж╢ржи ржЯрзНрж░рзНржпрж╛ржХ ржХрж░рж╛рж░ ржЬржирзНржп ржПржХржЯрж┐ ржЧрзНрж▓рзЛржмрж╛рж▓ ржЕржмржЬрзЗржХрзНржЯ
if (!global.client.quizSessions) {
  global.client.quizSessions = {};
}

module.exports.config = {
  name: "quiz1",
  version: "3.0.0",
  hasPermssion: 0,
  credits: "SHIFAT",
  description: "ржПржХрж╛ржзрж┐ржХ ржкрзНрж░рж╢рзНржирж╕рж╣ ржПржХржЯрж┐ ржХрзБржЗржЬ рж╕рзЗрж╢ржи ржЦрзЗрж▓рзБржиред",
  commandCategory: "game",
  usages: "[start/stop] [category en/bn] [rounds]",
  cooldowns: 10,
  envConfig: {
    rewardPerCorrect: 100, // ржкрзНрж░рждрж┐ржЯрж┐ рж╕ржарж┐ржХ ржЙрждрзНрждрж░рзЗрж░ ржЬржирзНржп ржХрзЯрзЗржи
    expPerCorrect: 20      // ржкрзНрж░рждрж┐ржЯрж┐ рж╕ржарж┐ржХ ржЙрждрзНрждрж░рзЗрж░ ржЬржирзНржп ржПржХрзНрж╕ржкрж┐
  }
};

// ржПржХржЯрж┐ ржирж┐рж░рзНржжрж┐рж╖рзНржЯ рж╕рзЗрж╢ржирзЗрж░ ржЬржирзНржп ржкрзНрж░рж╢рзНржи ржЬрж┐ржЬрзНржЮрж╛рж╕рж╛ ржХрж░рж╛рж░ ржлрж╛ржВрж╢ржи
async function askQuestion(api, event, session) {
  const { questions, currentQuestion, score } = session;
  const questionData = questions[currentQuestion];
  const { question, options, correctAnswer } = questionData;

  const quizMsg =
    ` рдкреНрд░рд╢реНрди ${currentQuestion + 1}/${questions.length} | рж╕рзНржХрзЛрж░: ${score}\n` +
    `\nтХнтФАтФАтЬж ${question}\n` +
    `тФЬтАг ЁЭЧФ) ${options.a}\n` +
    `тФЬтАг ЁЭЧХ) ${options.b}\n` +
    `тФЬтАг ЁЭЧЦ) ${options.c}\n` +
    `тФЬтАг ЁЭЧЧ) ${options.d}\n` +
    `тХ░тФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтАг\n` +
    `ржЖржкржирж╛рж░ ржЙрждрзНрждрж░ рж░рж┐ржкрзНрж▓рж╛ржЗ ржжрж┐ржиред`;

  api.sendMessage(quizMsg, event.threadID, (err, info) => {
    if (err) return console.error(err);

    if (!global.client.handleReply) global.client.handleReply = [];
    global.client.handleReply.push({
      name: module.exports.config.name,
      messageID: info.messageID,
      author: event.senderID,
      session: session, // ржкрзБрж░рзЛ рж╕рзЗрж╢ржи ржЕржмржЬрзЗржХрзНржЯ ржкрж╛рж╕ ржХрж░рж╛ рж╣ржЪрзНржЫрзЗ
      correctAnswer: correctAnswer
    });
    // рзкрзж рж╕рзЗржХрзЗржирзНржб ржкрж░ рж╕рзНржмрзЯржВржХрзНрж░рж┐рзЯржнрж╛ржмрзЗ ржкрзНрж░рж╢рзНржиржЯрж┐ ржорзБржЫрзЗ ржпрж╛ржмрзЗ
    setTimeout(() => api.unsendMessage(info.messageID).catch(() => {}), 40000);
  }, event.messageID);
}

module.exports.run = async function({ api, event, args }) {
  const { senderID, threadID, messageID } = event;
  const action = (args[0] || "").toLowerCase();
  
  if (action === "start") {
    if (global.client.quizSessions[senderID]) {
      return api.sendMessage("тЭМ ржЖржкржирж┐ ржЗрждрж┐ржоржзрзНржпрзЗржЗ ржПржХржЯрж┐ ржХрзБржЗржЬ рж╕рзЗрж╢ржирзЗ ржЖржЫрзЗржиред рж╢рзЗрж╖ ржХрж░рждрзЗ '/quiz stop' рж▓рж┐ржЦрзБржиред", threadID, messageID);
    }

    const category = (args[1] || "bn").toLowerCase() === "en" ? "english" : "bangla";
    let rounds = parseInt(args[2], 10) || 5;
    if (rounds > 15) rounds = 15; // рж╕рж░рзНржмрзЛржЪрзНржЪ рж░рж╛ржЙржирзНржб рж╕ржВржЦрзНржпрж╛ рззрзл

    api.sendMessage(`тП│ ${rounds} ржЯрж┐ ржкрзНрж░рж╢рзНржирзЗрж░ ржПржХржЯрж┐ ржХрзБржЗржЬ рж╕рзЗржЯ рждрзИрж░рж┐ ржХрж░рж╛ рж╣ржЪрзНржЫрзЗ...`, threadID, messageID);
    
    const baseApi = await getBaseApi();
    if (!baseApi) return api.sendMessage("тЭМ ржмрзЗрж╕ API рж▓рзЛржб рж╣рзЯржирж┐!", threadID, messageID);

    try {
      const questionPromises = [];
      for (let i = 0; i < rounds; i++) {
        questionPromises.push(axios.get(`${baseApi}/api/quiz?category=${category}`));
      }
      
      const responses = await Promise.all(questionPromises);
      const questions = responses.map(res => res.data);

      const session = {
        userId: senderID,
        questions: questions,
        currentQuestion: 0,
        score: 0
      };

      global.client.quizSessions[senderID] = session;
      await askQuestion(api, event, session);

    } catch (error) {
      console.error(error);
      api.sendMessage("тЭМ ржХрзБржЗржЬрзЗрж░ ржкрзНрж░рж╢рзНржи рж▓рзЛржб ржХрж░рждрзЗ рж╕ржорж╕рзНржпрж╛ рж╣рзЯрзЗржЫрзЗ!", threadID, messageID);
    }
  } else if (action === "stop") {
    if (global.client.quizSessions[senderID]) {
      delete global.client.quizSessions[senderID];
      api.sendMessage("тЬЕ ржЖржкржирж╛рж░ ржХрзБржЗржЬ рж╕рзЗрж╢ржиржЯрж┐ ржмржирзНржз ржХрж░рж╛ рж╣рзЯрзЗржЫрзЗред", threadID, messageID);
    } else {
      api.sendMessage("тЭМ ржЖржкржирж╛рж░ ржХрзЛржирзЛ ржЪрж▓ржорж╛ржи ржХрзБржЗржЬ рж╕рзЗрж╢ржи ржирзЗржЗред", threadID, messageID);
    }
  } else {
    api.sendMessage(
      "тД╣я╕П ржмрзНржпржмрж╣рж╛рж░ржмрж┐ржзрж┐:\n" +
      "┬╗ /quiz start [en/bn] [rounds] - ржирждрзБржи ржХрзБржЗржЬ рж╢рзБрж░рзБ ржХрж░рзБржиред\n" +
      "┬╗ /quiz stop - ржЪрж▓ржорж╛ржи ржХрзБржЗржЬ ржмржирзНржз ржХрж░рзБржиред\n" +
      "ржЙржжрж╛рж╣рж░ржг: /quiz start bn 5",
      threadID, messageID
    );
  }
};

module.exports.handleReply = async function({ api, event, handleReply }) {
  const { author, session, correctAnswer, messageID } = handleReply;
  const { senderID, threadID } = event;

  if (senderID !== author) {
    return api.sendMessage("тЭМ ржПржЯрж┐ ржЖржкржирж╛рж░ ржХрзБржЗржЬ ржирзЯред", threadID, event.messageID);
  }

  // ржкрзБрж░рж╛ржирзЛ ржкрзНрж░рж╢рзНржиржЯрж┐ ржорзБржЫрзЗ ржжрж┐ржи
  await api.unsendMessage(messageID).catch(() => {});

  const userAnswer = (event.body || "").trim().toLowerCase();
  const currentSession = global.client.quizSessions[senderID];

  if (!currentSession) {
    return api.sendMessage("тЭМ ржЖржкржирж╛рж░ ржХрзБржЗржЬ рж╕рзЗрж╢ржиржЯрж┐ рж╢рзЗрж╖ рж╣рзЯрзЗ ржЧрзЗржЫрзЗ ржмрж╛ ржмржирзНржз ржХрж░рж╛ рж╣рзЯрзЗржЫрзЗред", threadID, event.messageID);
  }
  
  // ржЙрждрзНрждрж░ ржЪрзЗржХ ржХрж░рж╛
  if (userAnswer === correctAnswer.toLowerCase()) {
    currentSession.score++;
    api.sendMessage(`тЬЕ рж╕ржарж┐ржХ ржЙрждрзНрждрж░!`, threadID);
  } else {
    api.sendMessage(`тЭМ ржнрзБрж▓ ржЙрждрзНрждрж░!\nрж╕ржарж┐ржХ ржЙрждрзНрждрж░ ржЫрж┐рж▓: ${correctAnswer}`, threadID);
  }

  currentSession.currentQuestion++;

  // ржХрзБржЗржЬ рж╢рзЗрж╖ рж╣рзЯрзЗржЫрзЗ ржХрж┐ржирж╛ рждрж╛ ржЪрзЗржХ ржХрж░рж╛
  if (currentSession.currentQuestion >= currentSession.questions.length) {
    const { score } = currentSession;
    const totalQuestions = currentSession.questions.length;
    
    const totalCoins = score * module.exports.config.envConfig.rewardPerCorrect;
    const totalExp = score * module.exports.config.envConfig.expPerCorrect;

    usersData.addCoins(senderID, totalCoins);
    usersData.addExp(senderID, totalExp);
    const user = usersData.get(senderID);

    const finalMsg = 
      `ЁЯОЙ ржХрзБржЗржЬ рж╢рзЗрж╖! ЁЯОЙ\n\n` +
      `ржлрж▓рж╛ржлрж▓: ржЖржкржирж┐ ${totalQuestions} ржЯрж┐ ржкрзНрж░рж╢рзНржирзЗрж░ ржоржзрзНржпрзЗ ${score} ржЯрж┐рж░ рж╕ржарж┐ржХ ржЙрждрзНрждрж░ ржжрж┐рзЯрзЗржЫрзЗржиред\n` +
      `ржЖржкржирж┐ ржкрзЗрзЯрзЗржЫрзЗржи:\n` +
      `ЁЯТ░ ржХрзЯрзЗржи: ${totalCoins}\n` +
      `тнР EXP: ${totalExp}\n\n` +
      `ржЖржкржирж╛рж░ ржмрж░рзНрждржорж╛ржи ржмрзНржпрж╛рж▓рзЗржирзНрж╕:\n` +
      `ЁЯТ░ ржорзЛржЯ ржХрзЯрзЗржи: ${user.coins}\n` +
      `тнР ржорзЛржЯ EXP: ${user.exp}`;

    api.sendMessage(finalMsg, threadID, event.messageID);
    delete global.client.quizSessions[senderID]; // рж╕рзЗрж╢ржи рж╢рзЗрж╖
  } else {
    // ржкрж░ржмрж░рзНрждрзА ржкрзНрж░рж╢рзНржи ржХрж░рж╛
    await askQuestion(api, event, currentSession);
  }
};
    
