const axios = require("axios");

// ‡¶™‡ßç‡¶∞‡¶§‡¶ø‡¶ü‡¶ø ‡¶•‡ßç‡¶∞‡ßá‡¶° (‡¶ö‡ßç‡¶Ø‡¶æ‡¶ü) ‡¶Ö‡¶®‡ßÅ‡¶Ø‡¶æ‡ßü‡ßÄ ‡¶Æ‡ßá‡¶Æ‡ßã‡¶∞‡¶ø ‡¶∞‡¶æ‡¶ñ‡¶æ ‡¶π‡¶¨‡ßá
const conversationMemory = new Map();

// ‡¶ï‡¶®‡¶´‡¶ø‡¶ó‡¶æ‡¶∞‡ßá‡¶∂‡¶®
module.exports.config = {
  name: "ai",
  version: "1.2.0",
  hasPermssion: 0,
  credits: "SHIFAT & Gemini (Improved)",
  description: "AI chat with improved memory management and response parsing.",
  commandCategory: "AI",
  usages: "[prompt]",
  cooldowns: 2,
};

// HuggingFace ‡¶•‡ßá‡¶ï‡ßá ‡¶â‡¶§‡ßç‡¶§‡¶∞ ‡¶Ü‡¶®‡¶æ‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø Helper ‡¶´‡¶æ‡¶Ç‡¶∂‡¶®
async function fetchFromHuggingFace(model, messages) {
  try {
    // ‡¶Ü‡¶ó‡ßá‡¶∞ ‡¶∏‡¶¨ ‡¶Æ‡ßá‡¶∏‡ßá‡¶ú ‡¶è‡¶ï‡¶§‡ßç‡¶∞‡¶ø‡¶§ ‡¶ï‡¶∞‡ßá ‡¶è‡¶ï‡¶ü‡¶ø ‡¶™‡ßç‡¶∞‡¶Æ‡ßç‡¶™‡¶ü ‡¶§‡ßà‡¶∞‡¶ø ‡¶ï‡¶∞‡¶æ ‡¶π‡¶ö‡ßç‡¶õ‡ßá
    const prompt = messages.map(m => `${m.role}: ${m.content}`).join("\n") + "\nassistant:";

    const response = await axios.post(
      `https://api-inference.huggingface.co/models/${model}`,
      { inputs: prompt },
      { headers: { "Content-Type": "application/json" }, timeout: 20000 }
    );

    let generatedText = response.data[0]?.generated_text?.trim();

    // üü¢ ‡¶Æ‡ßÇ‡¶≤ ‡¶â‡¶®‡ßç‡¶®‡¶§‡¶ø: ‡¶Æ‡¶°‡ßá‡¶≤‡ßá‡¶∞ ‡¶â‡¶§‡ßç‡¶§‡¶∞ ‡¶•‡ßá‡¶ï‡ßá ‡¶∂‡ßÅ‡¶ß‡ßÅ ‡¶®‡¶§‡ßÅ‡¶® ‡¶Ö‡¶Ç‡¶∂‡¶ü‡ßÅ‡¶ï‡ßÅ ‡¶¨‡ßá‡¶∞ ‡¶ï‡¶∞‡¶æ
    // ‡¶Ø‡¶¶‡¶ø ‡¶Æ‡¶°‡ßá‡¶≤ ‡¶™‡ßÅ‡¶∞‡ßã ‡¶™‡ßç‡¶∞‡¶Æ‡ßç‡¶™‡¶ü‡¶∏‡¶π ‡¶â‡¶§‡ßç‡¶§‡¶∞ ‡¶¶‡ßá‡ßü, ‡¶§‡¶¨‡ßá ‡¶Ü‡¶Æ‡¶∞‡¶æ ‡¶∂‡ßÅ‡¶ß‡ßÅ ‡¶®‡¶§‡ßÅ‡¶® ‡¶â‡¶§‡ßç‡¶§‡¶∞‡¶ü‡¶ø ‡¶®‡ßá‡¶¨‡•§
    if (generatedText && generatedText.startsWith(prompt)) {
      generatedText = generatedText.substring(prompt.length).trim();
    }
    
    // ‡¶Ö‡¶®‡ßá‡¶ï ‡¶∏‡¶Æ‡ßü ‡¶Æ‡¶°‡ßá‡¶≤ ‡¶â‡¶§‡ßç‡¶§‡¶∞‡ßá "assistant:" ‡¶Ö‡¶Ç‡¶∂‡¶ü‡¶ø ‡¶Ü‡¶¨‡¶æ‡¶∞ ‡¶Ø‡ßã‡¶ó ‡¶ï‡¶∞‡ßá, ‡¶∏‡ßá‡¶ü‡¶ø ‡¶¨‡¶æ‡¶¶ ‡¶¶‡ßá‡¶ì‡ßü‡¶æ ‡¶π‡¶≤‡ßã
    if (generatedText && generatedText.toLowerCase().startsWith("assistant:")) {
        generatedText = generatedText.substring("assistant:".length).trim();
    }

    return generatedText;
  } catch (err) {
    console.error(`‚ùå ${model} failed:`, err.message);
    return null; // ‡¶¨‡ßç‡¶Ø‡¶∞‡ßç‡¶• ‡¶π‡¶≤‡ßá null ‡¶∞‡¶ø‡¶ü‡¶æ‡¶∞‡ßç‡¶® ‡¶ï‡¶∞‡¶æ ‡¶π‡¶¨‡ßá
  }
}

// ‡¶Æ‡ßÇ‡¶≤ ‡¶´‡¶æ‡¶Ç‡¶∂‡¶®
module.exports.run = async function ({ api, event, args }) {
  try {
    const question = args.join(" ").trim();
    if (!question) {
      return api.sendMessage(
        "‚ùå ‡¶¶‡ßü‡¶æ ‡¶ï‡¶∞‡ßá ‡¶è‡¶ï‡¶ü‡¶ø ‡¶™‡ßç‡¶∞‡¶∂‡ßç‡¶® ‡¶≤‡¶ø‡¶ñ‡ßÅ‡¶®‡•§\n‡¶â‡¶¶‡¶æ‡¶π‡¶∞‡¶£: ai ‡¶ú‡ßÄ‡¶¨‡¶®‡ßá‡¶∞ ‡¶Æ‡¶æ‡¶®‡ßá ‡¶ï‡¶ø?",
        event.threadID,
        event.messageID
      );
    }

    // Typing Indicator ‡¶è‡¶¨‡¶Ç ‡¶≤‡ßã‡¶°‡¶ø‡¶Ç ‡¶Æ‡ßá‡¶∏‡ßá‡¶ú ‡¶™‡¶æ‡¶†‡¶æ‡¶®‡ßã
    api.sendTypingIndicator(event.threadID, true);
    const loadingMessage = await new Promise(resolve => {
      api.sendMessage("ü§ñ ‡¶ö‡¶ø‡¶®‡ßç‡¶§‡¶æ ‡¶ï‡¶∞‡¶õ‡¶ø...", event.threadID, (err, info) => {
        resolve(info || null);
      });
    });

    // ‡¶™‡ßÅ‡¶∞‡ßã‡¶®‡ßã ‡¶ï‡¶•‡ßã‡¶™‡¶ï‡¶•‡¶® ‡¶¨‡ßá‡¶∞ ‡¶ï‡¶∞‡¶æ ‡¶¨‡¶æ ‡¶®‡¶§‡ßÅ‡¶® ‡¶ï‡¶∞‡ßá ‡¶∂‡ßÅ‡¶∞‡ßÅ ‡¶ï‡¶∞‡¶æ
    if (!conversationMemory.has(event.threadID)) {
      conversationMemory.set(event.threadID, []);
    }
    const history = conversationMemory.get(event.threadID);
    
    // üü¢ ‡¶Æ‡ßá‡¶Æ‡ßã‡¶∞‡¶ø ‡¶Æ‡ßç‡¶Ø‡¶æ‡¶®‡ßá‡¶ú‡¶Æ‡ßá‡¶®‡ßç‡¶ü: ‡¶™‡ßÅ‡¶∞‡ßã‡¶®‡ßã ‡¶Æ‡ßá‡¶∏‡ßá‡¶ú ‡¶ï‡ßá‡¶ü‡ßá ‡¶¶‡¶ø‡ßü‡ßá ‡¶Æ‡ßá‡¶Æ‡ßã‡¶∞‡¶ø ‡¶π‡¶æ‡¶≤‡¶ï‡¶æ ‡¶∞‡¶æ‡¶ñ‡¶æ
    // ‡¶è‡¶ñ‡¶æ‡¶®‡ßá ‡¶∂‡ßá‡¶∑ ‡ßß‡ß¶‡¶ü‡¶ø ‡¶Æ‡ßá‡¶∏‡ßá‡¶ú ‡¶Æ‡¶®‡ßá ‡¶∞‡¶æ‡¶ñ‡¶æ ‡¶π‡¶¨‡ßá
    const MAX_HISTORY_LENGTH = 10;
    while (history.length > MAX_HISTORY_LENGTH) {
        history.shift(); // ‡¶∏‡¶¨‡¶ö‡ßá‡ßü‡ßá ‡¶™‡ßÅ‡¶∞‡ßã‡¶®‡ßã ‡¶Æ‡ßá‡¶∏‡ßá‡¶ú ‡¶¨‡¶æ‡¶¶ ‡¶¶‡ßá‡¶ì‡ßü‡¶æ ‡¶π‡¶≤‡ßã
    }

    // ‡¶á‡¶â‡¶ú‡¶æ‡¶∞‡ßá‡¶∞ ‡¶™‡ßç‡¶∞‡¶∂‡ßç‡¶® ‡¶Æ‡ßá‡¶Æ‡ßã‡¶∞‡¶ø‡¶§‡ßá ‡¶Ø‡ßã‡¶ó ‡¶ï‡¶∞‡¶æ
    history.push({ role: "user", content: question });

    let reply = null;

    // Primary Model: ‡¶ö‡ßá‡¶∑‡ßç‡¶ü‡¶æ ‡¶ï‡¶∞‡¶æ‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø ‡¶è‡¶ï‡¶ü‡¶ø ‡¶≠‡¶æ‡¶≤‡ßã ‡¶Æ‡¶°‡ßá‡¶≤ (‡¶Ø‡ßá‡¶Æ‡¶® Mistral)
    reply = await fetchFromHuggingFace("mistralai/Mistral-7B-Instruct-v0.2", history);

    // Fallback 1: BLOOM
    if (!reply) {
      console.log("Fallback to BLOOM...");
      reply = await fetchFromHuggingFace("bigscience/bloom", history);
    }

    // Fallback 2: GPT-2
    if (!reply) {
      console.log("Fallback to GPT-2...");
      reply = await fetchFromHuggingFace("gpt2", history);
    }

    // Typing Indicator ‡¶¨‡¶®‡ßç‡¶ß ‡¶ï‡¶∞‡¶æ
    api.sendTypingIndicator(event.threadID, false);
    
    // ‡¶≤‡ßã‡¶°‡¶ø‡¶Ç ‡¶Æ‡ßá‡¶∏‡ßá‡¶ú ‡¶°‡¶ø‡¶≤‡¶ø‡¶ü ‡¶ï‡¶∞‡¶æ
    if (loadingMessage) {
      api.unsendMessage(loadingMessage.messageID);
    }

    if (!reply) {
      return api.sendMessage(
        "üòÖ ‡¶¶‡ßÅ‡¶É‡¶ñ‡¶ø‡¶§, ‡¶è‡¶ñ‡¶® ‡¶ï‡ßã‡¶®‡ßã ‡¶â‡¶§‡ßç‡¶§‡¶∞ ‡¶¶‡¶ø‡¶§‡ßá ‡¶™‡¶æ‡¶∞‡¶õ‡¶ø ‡¶®‡¶æ‡•§ ‡¶Ü‡¶¨‡¶æ‡¶∞ ‡¶ö‡ßá‡¶∑‡ßç‡¶ü‡¶æ ‡¶ï‡¶∞‡ßÅ‡¶®‡•§",
        event.threadID,
        event.messageID
      );
    }

    // AI-‡¶è‡¶∞ ‡¶â‡¶§‡ßç‡¶§‡¶∞ ‡¶Æ‡ßá‡¶Æ‡ßã‡¶∞‡¶ø‡¶§‡ßá ‡¶Ø‡ßã‡¶ó ‡¶ï‡¶∞‡¶æ
    history.push({ role: "assistant", content: reply });

    // Messenger-‡¶è‡¶∞ 2000 ‡¶Ö‡¶ï‡ßç‡¶∑‡¶∞‡ßá‡¶∞ ‡¶≤‡¶ø‡¶Æ‡¶ø‡¶ü ‡¶Ö‡¶®‡ßÅ‡¶Ø‡¶æ‡ßü‡ßÄ ‡¶â‡¶§‡ßç‡¶§‡¶∞ ‡¶õ‡ßã‡¶ü ‡¶ï‡¶∞‡¶æ
    const finalReply = reply.length > 2000 ? reply.substring(0, 2000) + "..." : reply;

    // ‡¶´‡¶æ‡¶á‡¶®‡¶æ‡¶≤ ‡¶â‡¶§‡ßç‡¶§‡¶∞ ‡¶™‡¶æ‡¶†‡¶æ‡¶®‡ßã
    api.sendMessage(finalReply, event.threadID, event.messageID);

  } catch (error) {
    console.error("AI command fatal error:", error);
    api.sendTypingIndicator(event.threadID, false);
    api.sendMessage("‚ö†Ô∏è ‡¶ï‡¶ø‡¶õ‡ßÅ ‡¶è‡¶ï‡¶ü‡¶æ ‡¶∏‡¶Æ‡¶∏‡ßç‡¶Ø‡¶æ ‡¶π‡ßü‡ßá‡¶õ‡ßá, ‡¶¶‡ßü‡¶æ ‡¶ï‡¶∞‡ßá ‡¶Ü‡¶¨‡¶æ‡¶∞ ‡¶ö‡ßá‡¶∑‡ßç‡¶ü‡¶æ ‡¶ï‡¶∞‡ßÅ‡¶®‡•§", event.threadID, event.messageID);
  }
};
