const schedule = require('node-schedule');
const moment = require('moment-timezone');
const chalk = require('chalk');

module.exports.config = {
    name: 'azaan',
    version: '12.0.0',
    hasPermssion: 0,
    credits: 'SIFAT',
    description: 'Automatically sends prayer reminders at scheduled times (BD Time) and shows prayer times.',
    commandCategory: 'group messenger',
    usages: '[tomorrow]',
    cooldowns: 3
};

// ‡¶°‡¶ø‡¶ú‡¶ø‡¶ü‡¶æ‡¶≤ ‡¶∏‡ßç‡¶ü‡¶æ‡¶á‡¶≤ ‡¶®‡¶æ‡¶Æ‡¶æ‡¶ú ‡¶∞‡¶ø‡¶Æ‡¶æ‡¶á‡¶®‡ßç‡¶°‡¶æ‡¶∞ ‡¶Æ‡ßá‡¶∏‡ßá‡¶ú
const messages = [
    { 
        time: '4:45 AM', 
        message: "‚îè‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îì\n" +
                 "    üåô ‡¶´‡¶ú‡¶∞ ‡¶®‡¶æ‡¶Æ‡¶æ‡¶ú üïå\n" +
                 "‚îó‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îõ\n\n" +
                 "üîî ‡¶Ü‡¶∏-‡¶∏‡¶æ‡¶≤‡¶æ‡¶§‡ßÅ ‡¶ñ‡¶æ‡¶á‡¶∞‡ßÅ‡¶Æ ‡¶Æ‡¶ø‡¶®‡¶æ‡¶® ‡¶®‡¶æ‡¶â‡¶Æ\n" +
                 "‚ú® ‡¶è‡¶ñ‡¶® ‡¶´‡¶ú‡¶∞ ‡¶®‡¶æ‡¶Æ‡¶æ‡¶ú‡ßá‡¶∞ ‡¶∏‡¶Æ‡¶Ø‡¶º‡•§\n\n" +
                 "üïã ‡¶∏‡ßç‡¶®‡¶ø‡¶ó‡ßç‡¶ß ‡¶≠‡ßã‡¶∞‡ßá‡¶∞ ‡¶è‡¶á ‡¶™‡¶¨‡¶ø‡¶§‡ßç‡¶∞ ‡¶Æ‡ßÅ‡¶π‡ßÇ‡¶∞‡ßç‡¶§‡ßá\n" +
                 "‡¶Æ‡¶π‡¶æ‡¶® ‡¶Ü‡¶≤‡ßç‡¶≤‡¶æ‡¶π‡¶∞ ‡¶¶‡¶∞‡¶¨‡¶æ‡¶∞‡ßá ‡¶∏‡¶ø‡¶ú‡¶¶‡¶æ‡¶π ‡¶ï‡¶∞‡ßá ‡¶¶‡¶ø‡¶®‡ßá‡¶∞ ‡¶∏‡ßÇ‡¶ö‡¶®‡¶æ ‡¶ï‡¶∞‡ßÅ‡¶®‡•§"
    },
    { 
        time: '1:00 PM', 
        message: "‚îè‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îì\n" +
                 "     ‚òÄÔ∏è ‡¶Ø‡ßã‡¶π‡¶∞ ‡¶®‡¶æ‡¶Æ‡¶æ‡¶ú üïå\n" +
                 "‚îó‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îõ\n\n" +
                 "üîî ‡¶è‡¶ñ‡¶® ‡¶Ø‡ßã‡¶π‡¶∞‡ßá‡¶∞ ‡¶®‡¶æ‡¶Æ‡¶æ‡¶ú‡ßá‡¶∞ ‡¶∏‡¶Æ‡¶Ø‡¶º‡•§\n\n" +
                 "üìø ‡¶ï‡¶∞‡ßç‡¶Æ‡¶¨‡ßç‡¶Ø‡¶∏‡ßç‡¶§‡¶§‡¶æ‡¶∞ ‡¶Æ‡¶æ‡¶ù‡ßá ‡¶è‡¶ï‡¶ü‡ßÅ ‡¶•‡ßá‡¶Æ‡ßá\n" +
                 "‡¶Ü‡¶ñ‡ßá‡¶∞‡¶æ‡¶§‡ßá‡¶∞ ‡¶™‡ßç‡¶∞‡¶∏‡ßç‡¶§‡ßÅ‡¶§‡¶ø ‡¶®‡¶ø‡¶®‡•§\n" +
                 "ü§≤ ‡¶Ü‡¶≤‡ßç‡¶≤‡¶æ‡¶π ‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶™‡ßç‡¶∞‡¶§‡¶ø ‡¶∏‡¶π‡¶æ‡¶Ø‡¶º ‡¶π‡ßã‡¶®‡•§"
    },
    { 
        time: '4:40 PM', 
        message: "‚îè‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îì\n" +
                 "     üåá ‡¶Ü‡¶∏‡¶∞ ‡¶®‡¶æ‡¶Æ‡¶æ‡¶ú üïå\n" +
                 "‚îó‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îõ\n\n" +
                 "üîî ‡¶è‡¶ñ‡¶® ‡¶Ü‡¶∏‡¶∞‡ßá‡¶∞ ‡¶®‡¶æ‡¶Æ‡¶æ‡¶ú‡ßá‡¶∞ ‡¶∏‡¶Æ‡¶Ø‡¶º‡•§\n\n" +
                 "üìø ‡¶¶‡¶ø‡¶®‡ßá‡¶∞ ‡¶∂‡ßá‡¶∑‡¶≠‡¶æ‡¶ó‡ßá ‡¶∂‡ßÅ‡¶ï‡¶∞‡¶ø‡¶Ø‡¶º‡¶æ ‡¶Ü‡¶¶‡¶æ‡¶Ø‡¶º ‡¶ï‡¶∞‡ßÅ‡¶®\n" +
                 "üå∏ ‡¶®‡¶ø‡¶∂‡ßç‡¶ö‡¶Ø‡¶º‡¶á ‡¶Ü‡¶≤‡ßç‡¶≤‡¶æ‡¶π ‡¶™‡¶∞‡¶Æ ‡¶ï‡¶∞‡ßÅ‡¶£‡¶æ‡¶Æ‡¶Ø‡¶º‡•§"
    },
    { 
        time: '6:20 PM', 
        message: "‚îè‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îì\n" +
                 "   üåÜ ‡¶Æ‡¶æ‡¶ó‡¶∞‡¶ø‡¶¨ ‡¶®‡¶æ‡¶Æ‡¶æ‡¶ú üïå\n" +
                 "‚îó‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îõ\n\n" +
                 "üîî ‡¶∏‡ßÇ‡¶∞‡ßç‡¶Ø ‡¶Ö‡¶∏‡ßç‡¶§ ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá, ‡¶è‡¶ñ‡¶® ‡¶Æ‡¶æ‡¶ó‡¶∞‡¶ø‡¶¨‡ßá‡¶∞ ‡¶∏‡¶Æ‡¶Ø‡¶º‡•§\n\n" +
                 "üë®‚Äçüë©‚Äçüëß‚Äçüë¶ ‡¶™‡¶∞‡¶ø‡¶¨‡¶æ‡¶∞ ‡¶®‡¶ø‡¶Ø‡¶º‡ßá ‡¶®‡¶æ‡¶Æ‡¶æ‡¶ú ‡¶Ü‡¶¶‡¶æ‡¶Ø‡¶º ‡¶ï‡¶∞‡ßÅ‡¶®\n" +
                 "ü§≤ ‡¶Ü‡¶≤‡ßç‡¶≤‡¶æ‡¶π‡¶∞ ‡¶ï‡¶æ‡¶õ‡ßá ‡¶¶‡ßã‡¶Ø‡¶º‡¶æ ‡¶ï‡¶∞‡ßÅ‡¶®‡•§"
    },
    { 
        time: '7:35 PM', 
        message: "‚îè‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îì\n" +
                 "     üåô ‡¶è‡¶∂‡¶æ ‡¶®‡¶æ‡¶Æ‡¶æ‡¶ú üïå\n" +
                 "‚îó‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îõ\n\n" +
                 "üîî ‡¶è‡¶ñ‡¶® ‡¶è‡¶∂‡¶æ‡¶∞ ‡¶®‡¶æ‡¶Æ‡¶æ‡¶ú‡ßá‡¶∞ ‡¶∏‡¶Æ‡¶Ø‡¶º‡•§\n\n" +
                 "‚ú® ‡¶¶‡¶ø‡¶®‡¶∂‡ßá‡¶∑‡ßá‡¶∞ ‡¶™‡ßç‡¶∞‡¶∂‡¶æ‡¶®‡ßç‡¶§‡¶ø‡¶§‡ßá ‡¶á‡¶¨‡¶æ‡¶¶‡¶§ ‡¶ï‡¶∞‡ßÅ‡¶®\n" +
                 "üïã ‡¶Ü‡¶≤‡ßç‡¶≤‡¶æ‡¶π ‡¶Ü‡¶Æ‡¶æ‡¶¶‡ßá‡¶∞ ‡¶á‡¶¨‡¶æ‡¶¶‡¶§ ‡¶ï‡¶¨‡ßÅ‡¶≤ ‡¶ï‡¶∞‡ßÅ‡¶®‡•§"
    }
];

module.exports.onLoad = ({ api }) => {
    console.log(chalk.bold.hex("#00c300")("============ NAMAZ REMINDER LOADED (BD TIME) ============"));

    messages.forEach(({ time, message }) => {
        const parsed = moment.tz(time, "h:mm A", "Asia/Dhaka");

        const rule = new schedule.RecurrenceRule();
        rule.tz = 'Asia/Dhaka';
        rule.hour = parsed.hour();
        rule.minute = parsed.minute();

        schedule.scheduleJob(rule, () => {
            if (!global.data?.allThreadID) return;
            global.data.allThreadID.forEach(threadID => {
                api.sendMessage(message, threadID, (error) => {
                    if (error) {
                        console.error(`Failed to send message to ${threadID}:`, error);
                    }
                });
            });
        });

        console.log(chalk.hex("#00FFFF")(`Scheduled (BDT): ${parsed.format("h:mm A")} => ${message}`));
    });
};

module.exports.run = ({ api, event, args }) => {
    // ‡¶è‡¶á ‡¶∏‡¶Æ‡¶Ø‡¶º‡¶ó‡ßÅ‡¶≤‡ßã ‡¶â‡¶¶‡¶æ‡¶π‡¶∞‡¶£ ‡¶π‡¶ø‡¶∏‡ßá‡¶¨‡ßá ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞ ‡¶ï‡¶∞‡¶æ ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá‡•§
    // ‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶è‡¶≤‡¶æ‡¶ï‡¶æ‡¶∞ ‡¶∏‡¶†‡¶ø‡¶ï ‡¶∏‡¶Æ‡¶Ø‡¶º ‡¶Ö‡¶®‡ßÅ‡¶Ø‡¶æ‡¶Ø‡¶º‡ßÄ ‡¶è‡¶ó‡ßÅ‡¶≤‡ßã ‡¶™‡¶∞‡¶ø‡¶¨‡¶∞‡ßç‡¶§‡¶® ‡¶ï‡¶∞‡¶§‡ßá ‡¶™‡¶æ‡¶∞‡ßá‡¶®‡•§
    const todayTimes = {
        '‡¶´‡¶ú‡¶∞': '04:33 AM', 
        '‡¶Ø‡ßã‡¶π‡¶∞': '01:01 PM', 
        '‡¶Ü‡¶∏‡¶∞': '04:27 PM', 
        '‡¶Æ‡¶æ‡¶ó‡¶∞‡¶ø‡¶¨': '06:14 PM', 
        '‡¶è‡¶∂‡¶æ': '07:35 PM'
    };

    const tomorrowTimes = {
        '‡¶´‡¶ú‡¶∞': '04:33 AM', 
        '‡¶Ø‡ßã‡¶π‡¶∞': '01:01 PM', 
        '‡¶Ü‡¶∏‡¶∞': '04:27 PM', 
        '‡¶Æ‡¶æ‡¶ó‡¶∞‡¶ø‡¶¨': '06:14 PM', 
        '‡¶è‡¶∂‡¶æ': '07:36 PM'
    };
    
    let prayerTimes;
    let messageHeader;
    const today = moment.tz("Asia/Dhaka").format("DD-MM-YYYY");
    const tomorrow = moment.tz("Asia/Dhaka").add(1, 'days').format("DD-MM-YYYY");

    if (args[0]?.toLowerCase() === 'tomorrow') {
        prayerTimes = tomorrowTimes;
        messageHeader = `üóìÔ∏è ‡¶Ü‡¶ó‡¶æ‡¶Æ‡ßÄ‡¶ï‡¶æ‡¶≤‡ßá‡¶∞ (${tomorrow}) ‡¶®‡¶æ‡¶Æ‡¶æ‡¶ú‡ßá‡¶∞ ‡¶∏‡¶Æ‡¶Ø‡¶º‡¶∏‡ßÇ‡¶ö‡¶ø:`;
    } else {
        prayerTimes = todayTimes;
        messageHeader = `üóìÔ∏è ‡¶Ü‡¶ú‡¶ï‡ßá‡¶∞ (${today}) ‡¶®‡¶æ‡¶Æ‡¶æ‡¶ú‡ßá‡¶∞ ‡¶∏‡¶Æ‡¶Ø‡¶º‡¶∏‡ßÇ‡¶ö‡¶ø:`;
    }
    
    let prayerMessage = `${messageHeader}\n\n`;
    for (const prayer in prayerTimes) {
        prayerMessage += `üïå ${prayer}: ${prayerTimes[prayer]}\n`;
    }
    
    api.sendMessage(prayerMessage, event.threadID, event.messageID);
};
