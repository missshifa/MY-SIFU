const axios = require("axios");

const getBaseApi = async () => {
  try {
    const res = await axios.get("https://raw.githubusercontent.com/mahmudx7/exe/main/baseApiUrl.json");
    return res.data.mahmud;
  } catch (e) {
    console.error("Base API ‡¶≤‡ßã‡¶° ‡¶ï‡¶∞‡¶§‡ßá ‡¶∏‡¶Æ‡¶∏‡ßç‡¶Ø‡¶æ:", e);
    return null;
  }
};

module.exports = {
  config: {
    name: "quiz",
    aliases: ["qz"],
    version: "1.0",
    author: "SHIFAT",
    countDown: 10,
    role: 0,
    category: "game",
    guide: {
      en: "{pn} [en/bn]"
    }
  },

  // ‡¶ï‡¶Æ‡¶æ‡¶®‡ßç‡¶° ‡¶∞‡¶æ‡¶® ‡¶ï‡¶∞‡¶æ‡¶∞ ‡¶´‡¶æ‡¶Ç‡¶∂‡¶®
  run: async function ({ api, event, usersData, args }) {
    try {
      const input = (args[0] || "").toLowerCase();
      const category = input === "en" || input === "english" ? "english" : "bangla";

      const baseApi = await getBaseApi();
      if (!baseApi) {
        return api.sendMessage("‚ùå ‡¶¨‡ßá‡¶∏ API ‡¶≤‡ßã‡¶° ‡¶π‡ßü‡¶®‡¶ø!", event.threadID, event.messageID);
      }

      const res = await axios.get(`${baseApi}/api/quiz?category=${category}`);
      const quiz = res.data;

      if (!quiz) {
        return api.sendMessage("‚ùå ‡¶è‡¶á ‡¶ï‡ßç‡¶Ø‡¶æ‡¶ü‡¶æ‡¶ó‡¶∞‡¶ø‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø ‡¶ï‡ßã‡¶®‡ßã Quiz ‡¶™‡¶æ‡¶ì‡ßü‡¶æ ‡¶Ø‡¶æ‡ßü‡¶®‡¶ø‡•§", event.threadID, event.messageID);
      }

      const { question, correctAnswer, options } = quiz;
      const { a, b, c, d } = options;

      const quizMsg =
        `\n‚ï≠‚îÄ‚îÄ‚ú¶ ${question}\n` +
        `‚îú‚Ä£ ùóî) ${a}\n` +
        `‚îú‚Ä£ ùóï) ${b}\n` +
        `‚îú‚Ä£ ùóñ) ${c}\n` +
        `‚îú‚Ä£ ùóó) ${d}\n` +
        `‚ï∞‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚Ä£\n` +
        `ùêëùêûùê©ùê•ùê≤ ùê∞ùê¢ùê≠ùê° ùê≤ùê®ùêÆùê´ ùêöùêßùê¨ùê∞ùêûùê´.`;

      // ‡¶ï‡ßÅ‡¶á‡¶ú ‡¶Æ‡ßá‡¶∏‡ßá‡¶ú ‡¶™‡¶æ‡¶†‡¶æ‡¶®‡ßã ‡¶è‡¶¨‡¶Ç onReply ‡¶∏‡ßá‡¶ü ‡¶ï‡¶∞‡¶æ
      api.sendMessage(quizMsg, event.threadID, (err, info) => {
        if (err) return console.error(err);

        global.GoatBot.onReply.set(info.messageID, {
          type: "quiz-reply",
          commandName: this.config.name,
          author: event.senderID,
          messageID: info.messageID,
          correctAnswer
        });

        // 40 ‡¶∏‡ßá‡¶ï‡ßá‡¶®‡ßç‡¶° ‡¶™‡¶∞ ‡¶™‡ßç‡¶∞‡¶∂‡ßç‡¶® ‡¶°‡¶ø‡¶≤‡¶ø‡¶ü
        setTimeout(() => {
          api.unsendMessage(info.messageID);
        }, 40000);
      }, event.messageID);

    } catch (error) {
      console.error(error);
      api.sendMessage("‚ú®‡¶ï‡ßÅ‡¶á‡¶ú ‡¶≤‡ßã‡¶° ‡¶ï‡¶∞‡¶§‡ßá ‡¶∏‡¶Æ‡¶∏‡ßç‡¶Ø‡¶æ ‡¶π‡ßü‡ßá‡¶õ‡ßá, ‡¶Ü‡¶¨‡¶æ‡¶∞ ‡¶ö‡ßá‡¶∑‡ßç‡¶ü‡¶æ ‡¶ï‡¶∞‡ßã‡•§", event.threadID, event.messageID);
    }
  },

  // Reply ‡¶π‡ßç‡¶Ø‡¶æ‡¶®‡ßç‡¶°‡¶≤‡¶æ‡¶∞
  onReply: async function ({ event, api, Reply, usersData }) {
    const { correctAnswer, author } = Reply;

    // ‡¶®‡¶ø‡¶∂‡ßç‡¶ö‡¶ø‡¶§ ‡¶ï‡¶∞‡¶æ ‡¶Ø‡ßá ‡¶â‡¶§‡ßç‡¶§‡¶∞‡¶¶‡¶æ‡¶§‡¶æ ‡¶ï‡ßÅ‡¶á‡¶ú ‡¶∂‡ßÅ‡¶∞‡ßÅ ‡¶ï‡¶∞‡¶æ ‡¶¨‡ßç‡¶Ø‡¶ï‡ßç‡¶§‡¶ø
    if (event.senderID !== author) {
      return api.sendMessage("ü§ì‡¶è‡¶á ‡¶ï‡ßÅ‡¶á‡¶ú ‡¶§‡ßã‡¶Æ‡¶æ‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø ‡¶®‡ßü‡•§", event.threadID, event.messageID);
    }

    // ‡¶Æ‡ßá‡¶∏‡ßá‡¶ú ‡¶Ü‡¶®‡¶∏‡ßá‡¶®‡ßç‡¶° ‡¶ï‡¶∞‡¶æ
    await api.unsendMessage(Reply.messageID);
    const userAnswer = event.body.trim().toLowerCase();

    // ‡¶â‡¶§‡ßç‡¶§‡¶∞ ‡¶Ø‡¶æ‡¶ö‡¶æ‡¶á ‡¶ï‡¶∞‡¶æ
    if (userAnswer === correctAnswer.toLowerCase()) {
      const rewardCoins = 500;
      const rewardExp = 100;

      const userData = await usersData.get(author);
      await usersData.set(author, {
        money: userData.money + rewardCoins,
        exp: userData.exp + rewardExp,
        data: userData.data
      });

      api.sendMessage(
        `ü´°‡¶∏‡¶†‡¶ø‡¶ï ‡¶â‡¶§‡ßç‡¶§‡¶∞!\n‡¶§‡ßÅ‡¶Æ‡¶ø ‡¶™‡ßá‡ßü‡ßá‡¶õ‡ßã ${rewardCoins} ‡¶ï‡ßü‡ßá‡¶® ‡¶è‡¶¨‡¶Ç ${rewardExp} EXP üéâ`,
        event.threadID,
        event.messageID
      );
    } else {
      api.sendMessage(
        `ü•± ‡¶≠‡ßÅ‡¶≤ ‡¶â‡¶§‡ßç‡¶§‡¶∞!\n‡¶∏‡¶†‡¶ø‡¶ï ‡¶â‡¶§‡ßç‡¶§‡¶∞ ‡¶õ‡¶ø‡¶≤: ${correctAnswer}`,
        event.threadID,
        event.messageID
      );
    }
  }
};
