const axios = require("axios");

// üî¥üî¥üî¥ ‡¶ß‡¶æ‡¶™ ‡ß©: ‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ Gemini API Key ‡¶è‡¶ñ‡¶æ‡¶®‡ßá ‡¶Ø‡ßã‡¶ó ‡¶ï‡¶∞‡ßÅ‡¶® üî¥üî¥üî¥
// ‡¶®‡¶ø‡¶ö‡ßá‡¶∞ "" ‡¶è‡¶∞ ‡¶≠‡ßá‡¶§‡¶∞‡ßá ‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶ï‡¶™‡¶ø ‡¶ï‡¶∞‡¶æ API Key ‡¶ü‡¶ø ‡¶™‡ßá‡¶∏‡ßç‡¶ü ‡¶ï‡¶∞‡ßÅ‡¶®‡•§
const GEMINI_API_KEY = "AIzaSyABjIhqaAj5hxLmnPzeSuIPJ6fxVIKgIQ8";

// ‡¶™‡ßç‡¶∞‡¶§‡¶ø‡¶ü‡¶ø ‡¶•‡ßç‡¶∞‡ßá‡¶° (‡¶ö‡ßç‡¶Ø‡¶æ‡¶ü) ‡¶Ö‡¶®‡ßÅ‡¶Ø‡¶æ‡ßü‡ßÄ ‡¶Æ‡ßá‡¶Æ‡ßã‡¶∞‡¶ø ‡¶∞‡¶æ‡¶ñ‡¶æ ‡¶π‡¶¨‡ßá
const conversationMemory = new Map();

module.exports.config = {
  name: "ai",
  version: "2.0.0", // Stable Version
  hasPermssion: 0,
  credits: "SHIFAT & Gemini (Stable Version)",
  description: "AI chat using Google's reliable Gemini API.",
  commandCategory: "AI",
  usages: "[prompt]",
  cooldowns: 3,
};

// Gemini API ‡¶•‡ßá‡¶ï‡ßá ‡¶â‡¶§‡ßç‡¶§‡¶∞ ‡¶Ü‡¶®‡¶æ‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø ‡¶´‡¶æ‡¶Ç‡¶∂‡¶®
async function fetchFromGemini(history, threadID) {
  // Gemini-‡¶è‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø ‡¶ï‡¶•‡ßã‡¶™‡¶ï‡¶•‡¶®‡ßá‡¶∞ ‡¶´‡¶∞‡ßç‡¶Æ‡ßç‡¶Ø‡¶æ‡¶ü ‡¶§‡ßà‡¶∞‡¶ø ‡¶ï‡¶∞‡¶æ
  const contents = history.map(turn => ({
    role: turn.role === "user" ? "user" : "model",
    parts: [{ text: turn.content }]
  }));

  // Gemini ‡¶∏‡¶¨‡¶∏‡¶Æ‡ßü ‡¶∂‡ßá‡¶∑‡ßá ‡¶á‡¶â‡¶ú‡¶æ‡¶∞‡ßá‡¶∞ ‡¶™‡ßç‡¶∞‡¶∂‡ßç‡¶® ‡¶Ü‡¶∂‡¶æ ‡¶ï‡¶∞‡ßá, ‡¶§‡¶æ‡¶á ‡¶Ü‡¶ó‡ßá‡¶∞ ‡¶Æ‡¶°‡ßá‡¶≤‡ßá‡¶∞ ‡¶â‡¶§‡ßç‡¶§‡¶∞ ‡¶¨‡¶æ‡¶¶ ‡¶¶‡ßá‡¶ì‡ßü‡¶æ ‡¶π‡¶≤‡ßã ‡¶Ø‡¶¶‡¶ø ‡¶•‡¶æ‡¶ï‡ßá
  if (contents.length > 1 && contents[contents.length - 1].role === 'model') {
    contents.pop();
  }

  try {
    console.log(`[AI] üß† ${threadID} - Gemini API ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞ ‡¶ï‡¶∞‡ßá ‡¶â‡¶§‡ßç‡¶§‡¶∞ ‡¶ñ‡ßã‡¶Å‡¶ú‡¶æ ‡¶π‡¶ö‡ßç‡¶õ‡ßá...`);
    
    const response = await axios.post(
      `https://generativelanguage.googleapis.com/v1beta/models/gemini-1.5-flash-latest:generateContent?key=${GEMINI_API_KEY}`,
      { contents },
      { headers: { "Content-Type": "application/json" }, timeout: 60000 }
    );

    const text = response.data?.candidates?.[0]?.content?.parts?.[0]?.text;
    
    if (text) {
      console.log(`[AI] ‚úÖ ${threadID} - Gemini API ‡¶•‡ßá‡¶ï‡ßá ‡¶∏‡¶´‡¶≤‡¶≠‡¶æ‡¶¨‡ßá ‡¶â‡¶§‡ßç‡¶§‡¶∞ ‡¶™‡¶æ‡¶ì‡ßü‡¶æ ‡¶ó‡ßá‡¶õ‡ßá‡•§`);
      return text.trim();
    } else {
      console.error(`[AI] ‚ùå ${threadID} - Gemini API ‡¶•‡ßá‡¶ï‡ßá ‡¶ï‡ßã‡¶®‡ßã ‡¶â‡¶§‡ßç‡¶§‡¶∞ ‡¶™‡¶æ‡¶ì‡ßü‡¶æ ‡¶Ø‡¶æ‡ßü‡¶®‡¶ø‡•§ Response:`, response.data);
      return "‡¶¶‡ßÅ‡¶É‡¶ñ‡¶ø‡¶§, ‡¶Ü‡¶Æ‡¶ø ‡¶â‡¶§‡ßç‡¶§‡¶∞‡¶ü‡¶ø ‡¶†‡¶ø‡¶ï‡¶≠‡¶æ‡¶¨‡ßá ‡¶™‡ßç‡¶∞‡¶∏‡ßá‡¶∏ ‡¶ï‡¶∞‡¶§‡ßá ‡¶™‡¶æ‡¶∞‡¶ø‡¶®‡¶ø‡•§";
    }

  } catch (error) {
    const errorMessage = error.response ? error.response.data.error.message : error.message;
    console.error(`[AI] ‚ùå ${threadID} - Gemini API ‡¶§‡ßá ‡¶∏‡¶Æ‡¶∏‡ßç‡¶Ø‡¶æ ‡¶π‡ßü‡ßá‡¶õ‡ßá:`, errorMessage);
    return `‡¶¶‡ßÅ‡¶É‡¶ñ‡¶ø‡¶§, ‡¶è‡¶ï‡¶ü‡¶ø ‡¶∏‡¶Æ‡¶∏‡ßç‡¶Ø‡¶æ ‡¶π‡ßü‡ßá‡¶õ‡ßá‡•§ API Error: ${errorMessage}`;
  }
}

// ‡¶Æ‡ßÇ‡¶≤ ‡¶´‡¶æ‡¶Ç‡¶∂‡¶®
module.exports.run = async function ({ api, event, args }) {
  // API Key ‡¶∏‡ßá‡¶ü ‡¶ï‡¶∞‡¶æ ‡¶π‡ßü‡ßá‡¶õ‡ßá ‡¶ï‡¶ø‡¶®‡¶æ ‡¶§‡¶æ ‡¶™‡¶∞‡ßÄ‡¶ï‡ßç‡¶∑‡¶æ ‡¶ï‡¶∞‡¶æ
  if (!GEMINI_API_KEY || GEMINI_API_KEY === "") {
    return api.sendMessage("‚ùå Gemini API Key ‡¶∏‡ßá‡¶ü ‡¶ï‡¶∞‡¶æ ‡¶π‡¶Ø‡¶º‡¶®‡¶ø!\n\n‡¶¶‡ßü‡¶æ ‡¶ï‡¶∞‡ßá ai.js ‡¶´‡¶æ‡¶á‡¶≤‡ßá‡¶∞ ‡¶∂‡ßÅ‡¶∞‡ßÅ‡¶§‡ßá ‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶®‡¶ø‡¶ú‡ßá‡¶∞ API Key ‡¶Ø‡ßã‡¶ó ‡¶ï‡¶∞‡ßÅ‡¶®‡•§\n\nKey ‡¶™‡¶æ‡¶ì‡ßü‡¶æ‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø ‡¶è‡¶ñ‡¶æ‡¶®‡ßá ‡¶Ø‡¶æ‡¶®: https://aistudio.google.com/app/apikey", event.threadID, event.messageID);
  }

  try {
    const question = args.join(" ").trim();
    if (!question) {
      return api.sendMessage("‚ùå ‡¶¶‡ßü‡¶æ ‡¶ï‡¶∞‡ßá ‡¶è‡¶ï‡¶ü‡¶ø ‡¶™‡ßç‡¶∞‡¶∂‡ßç‡¶® ‡¶≤‡¶ø‡¶ñ‡ßÅ‡¶®‡•§\n‡¶â‡¶¶‡¶æ‡¶π‡¶∞‡¶£: ai ‡¶¨‡¶æ‡¶Ç‡¶≤‡¶æ‡¶¶‡ßá‡¶∂‡ßá‡¶∞ ‡¶∞‡¶æ‡¶ú‡¶ß‡¶æ‡¶®‡ßÄ‡¶∞ ‡¶®‡¶æ‡¶Æ ‡¶ï‡¶ø?", event.threadID, event.messageID);
    }
    
    console.log(`[AI] üí¨ ${event.threadID} - ‡¶®‡¶§‡ßÅ‡¶® ‡¶™‡ßç‡¶∞‡¶∂‡ßç‡¶®: "${question}"`);

    api.sendTypingIndicator(event.threadID, true);
    const loadingMessage = await new Promise(resolve => {
      api.sendMessage("ü§ñ ‡¶â‡¶§‡ßç‡¶§‡¶∞ ‡¶§‡ßà‡¶∞‡¶ø ‡¶ï‡¶∞‡¶õ‡¶ø...", event.threadID, (err, info) => {
        resolve(info || null);
      });
    });

    if (!conversationMemory.has(event.threadID)) {
      conversationMemory.set(event.threadID, []);
    }
    const history = conversationMemory.get(event.threadID);
    
    const MAX_HISTORY_LENGTH = 10;
    while (history.length > MAX_HISTORY_LENGTH) {
      history.shift();
    }

    history.push({ role: "user", content: question });

    // Gemini API ‡¶•‡ßá‡¶ï‡ßá ‡¶â‡¶§‡ßç‡¶§‡¶∞ ‡¶Ü‡¶®‡¶æ
    let reply = await fetchFromGemini(history, event.threadID);

    api.sendTypingIndicator(event.threadID, false);
    
    if (loadingMessage) {
      api.unsendMessage(loadingMessage.messageID);
    }

    if (!reply) {
      return api.sendMessage("üòÖ ‡¶¶‡ßÅ‡¶É‡¶ñ‡¶ø‡¶§, Gemini API ‡¶•‡ßá‡¶ï‡ßá ‡¶ï‡ßã‡¶®‡ßã ‡¶â‡¶§‡ßç‡¶§‡¶∞ ‡¶™‡¶æ‡¶ì‡ßü‡¶æ ‡¶Ø‡¶æ‡ßü‡¶®‡¶ø‡•§ ‡¶ï‡¶ø‡¶õ‡ßÅ‡¶ï‡ßç‡¶∑‡¶£ ‡¶™‡¶∞ ‡¶Ü‡¶¨‡¶æ‡¶∞ ‡¶ö‡ßá‡¶∑‡ßç‡¶ü‡¶æ ‡¶ï‡¶∞‡ßÅ‡¶®‡•§", event.threadID, event.messageID);
    }
    
    history.push({ role: "assistant", content: reply });
    api.sendMessage(reply, event.threadID, event.messageID);

  } catch (error) {
    console.error("[AI] Fatal Error:", error);
    api.sendTypingIndicator(event.threadID, false);
    api.sendMessage("‚ö†Ô∏è ‡¶è‡¶ï‡¶ü‡¶ø ‡¶Ö‡¶™‡ßç‡¶∞‡¶§‡ßç‡¶Ø‡¶æ‡¶∂‡¶ø‡¶§ ‡¶∏‡¶Æ‡¶∏‡ßç‡¶Ø‡¶æ ‡¶π‡ßü‡ßá‡¶õ‡ßá‡•§ ‡¶¨‡¶ø‡¶∏‡ßç‡¶§‡¶æ‡¶∞‡¶ø‡¶§ ‡¶ú‡¶æ‡¶®‡¶§‡ßá ‡¶ï‡¶®‡¶∏‡ßã‡¶≤ ‡¶ö‡ßá‡¶ï ‡¶ï‡¶∞‡ßÅ‡¶®‡•§", event.threadID, event.messageID);
  }
};
